package multithread;
public class BankAccount {
    private double balance;

    // Constructor to initialize balance
    public BankAccount(double balance) {
        this.balance = balance;
    }

    // Synchronized method to withdraw money
    public synchronized void withdraw(double amount) {
        if (balance >= amount) {
            // Simulating delay to show concurrent behavior
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            balance -= amount;
            System.out.println(Thread.currentThread().getName() + " withdrew " + amount + ", Remaining balance: " + balance);
        } else {
            System.out.println(Thread.currentThread().getName() + " attempted to withdraw " + amount + " but insufficient funds.");
        }
    }

    // Getter for the balance
    public double getBalance() {
        return balance;
    }

    public static void main(String[] args) {
        // Create a bank account with an initial balance of 1000
        BankAccount account = new BankAccount(1000);

        // Create two threads representing two people trying to withdraw money
        Thread person1 = new Thread(new WithdrawTask(account, 700), "Person 1");
        Thread person2 = new Thread(new WithdrawTask(account, 500), "Person 2");

        // Start the threads
        person1.start();
        person2.start();
    }
}

class WithdrawTask implements Runnable {
    private BankAccount account;
    private double amount;

    public WithdrawTask(BankAccount account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void run() {
        // Each person tries to withdraw money
        account.withdraw(amount);
    }
}

